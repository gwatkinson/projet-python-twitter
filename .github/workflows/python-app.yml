# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
# and https://github.community/t/run-job-only-if-folder-changed/118292

name: Python application

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  check_python:
    name: Check the python files
    outputs:
      run_job: ${{ steps.check_files_python.outputs.run_job }}
    runs-on: ubuntu-latest
    steps:
      - name: A) Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: B) Check modified files
        id: check_files_python
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD

          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r file
          do
            echo "::set-output name=run_job::false"
            if [[ $file != projet/* && $file != test/* ]]; then
              echo "::set-output name=run_job::true"
              break
            fi
          done < files.txt

  build:
    name: Lint, test and doc
    needs: check_python
    runs-on: ubuntu-latest
    if: needs.check_python.outputs.run_job == 'true'
    steps:
      - name: A) Checkout code
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: B)(1/2) Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: B)(2/2) Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install flake8 pytest pytest-cov pdoc3
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: C) Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: D)(1/2) Test with pytest
        run: |
          pytest -rxXs -v test/

      - name: D)(2/2) Test coverage with pytest-cov
        run: |
          pytest --cov="." test/

      - name: E)(1/5) Generate documentation
        run: |
          pdoc --html -f --output-dir docs projet
          # mv docs/projet/* docs
          # rmdir docs/projet

      - name: E)(2/5) Check if docs files changed
        id: check_files_docs
        run: |
          echo "=============== list modified files ==============="
          git status --porcelain | cut -c4-

          git status --porcelain | cut -c4- > files.txt
          while IFS= read -r file
          do
            echo "::set-output name=run_doc::false"
            if [[ $file == docs/* ]]; then
              echo "::set-output name=run_doc::true"
              break
            fi
          done < files.txt

      - name: E)(3/5) Get branch name
        if: steps.check_files_docs.outputs.run_doc == 'true'
        id: branch_name
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          echo "=============== branch name ==============="

          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            echo "::set-output name=branch::${{ github.event.pull_request.head.ref }}"
            echo "pull_request : the branch is '${{ github.event.pull_request.head.ref }}'"

          elif [[ ${{ github.event_name }} == 'push' ]]; then
            echo "::set-output name=branch::${{ github.ref }}"
            echo "push : the branch is '${{ github.ref }}'"

          elif [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
            echo "::set-output name=branch::'refs/heads/master'"
            echo "workflow_dispatch : the branch is 'refs/heads/master'"
          fi

      - name: E)(4/5) Commit files
        if: steps.check_files_docs.outputs.run_doc == 'true'
        run: |
          git checkout ${{ steps.branch_name.outputs.branch }}
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/*
          git commit -m "Automatic commit : Update documentation"

      - name: E)(5/5) Push changes
        if: steps.check_files_docs.outputs.run_doc == 'true' && steps.branch_name.outputs.branch != 'refs/heads/master'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.branch_name.outputs.branch }}
